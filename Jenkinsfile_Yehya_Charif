pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
        ENABLE_ASSERTS = 'true'  
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}/${VIRTUAL_ENV}")) {
                        sh "python3 -m venv ${VIRTUAL_ENV}"
                    }
                    sh "source ${VIRTUAL_ENV}/bin/activate && pip install --upgrade -r requirements.txt && pip show coverage"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    sh "source ${VIRTUAL_ENV}/bin/activate && flake8 app.py"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // If ENABLE_ASSERTS is set to true, allow asserts in the tests
                    sh """
                        source ${VIRTUAL_ENV}/bin/activate && 
                        export ENABLE_ASSERTS=true && 
                        pytest tests/test_app.py
                    """
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage run -m pytest"
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage report"
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage html"
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    // Exclude the 'venv' directory from the bandit scan
                    sh "source ${VIRTUAL_ENV}/bin/activate && bandit -r . -x ${VIRTUAL_ENV}"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying application..."
                    sh "./deployment.sh"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
